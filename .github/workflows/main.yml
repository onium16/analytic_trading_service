name: CI Pipeline

on:
  push:
    branches: [ main, master, ci-setup ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      clickhouse:
        image: clickhouse/clickhouse-server:latest
        ports: 
          - 18123:8123 
          - 19000:9000 
        env:
          CLICKHOUSE_HOST: clickhouse 
          CLICKHOUSE_USER: default
          CLICKHOUSE_PASSWORD: password
          CLICKHOUSE_PORT_HTTP: 8123 
          CLICKHOUSE_PORT_TCP: 9000 
          CLICKHOUSE_LOGIN: default 
        options: >-
          --health-cmd="clickhouse-client --query 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      # Bybit keys
      BYBIT_API_KEY: ""
      BYBIT_API_SECRET: ""
      BYBIT_BASE_URL: https://api.bybit.com
      BYBIT_KLINE_URL: https://api.bybit.com/v5/market/kline
      BYBIT_ORDERBOOK_URL: https://api.bybit.com/v5/market/orderbook
      BYBIT_WS_URL: wss://stream.bybit.com/v5/public/linear
      BYBIT_TEST_API_KEY: None
      BYBIT_TEST_API_SECRET: None
      BYBIT_TEST_BASE_URL: https://api-testnet.bybit.com
      BYBIT_TEST_ORDERBOOK_URL: https://api-testnet.bybit.com/v5/market/orderbook
      BYBIT_TEST_KLINE_URL: https://api-testnet.bybit.com/v5/market/kline
      BYBIT_TEST_WS_URL: wss://stream-testnet.bybit.com/v5/public/linear

      # Binance keys
      BINANCE_API_KEY: ""
      BINANCE_API_SECRET: ""
      BINANCE_BASE_URL: https://api.binance.com
      BINANCE_KLINE_URL: https://api.binance.com/api/v3/klines
      BINANCE_TEST_API_KEY: None
      BINANCE_TEST_API_SECRET: None
      BINANCE_TEST_BASE_URL: https://testnet.binance.vision
      BINANCE_TEST_KLINE_URL: https://testnet.binance.vision/api/v3/klines

      # ClickHouse connection (–¥–ª—è clickhouse-client –∏ Pydantic)
      CLICKHOUSE_HOST: localhost
      CLICKHOUSE_PORT: 18123
      CLICKHOUSE_USER: default
      CLICKHOUSE_LOGIN: default
      CLICKHOUSE_PASSWORD: password

      # ClickHouse DB settings (–¥–ª—è Pydantic)
      CLICKHOUSE_DB_NAME: oraculv2

      # Tables names (–¥–ª—è Pydantic)
      CLICKHOUSE_TABLE_KLINE_ARCHIVE: kline_archive
      CLICKHOUSE_TABLE_KLINE_ARCHIVE_DATETIME: kline_archive_datetime
      CLICKHOUSE_TABLE_ORDERBOOK_SNAPSHOTS: orderbook_archive_snapshots
      CLICKHOUSE_TABLE_ORDERBOOK_ARCHIVE_FILENAME: orderbook_archive_filename
      CLICKHOUSE_TABLE_TRADE_RESULTS: trade_results
      CLICKHOUSE_TABLE_TRADE_SIGNALS: trade_signals
      CLICKHOUSE_TABLE_POSITIONS: trade_positions

      # Tables names testnet (–¥–ª—è Pydantic)
      CLICKHOUSE_TABLE_KLINE_ARCHIVE_TESTNET: kline_archive_testnet
      CLICKHOUSE_TABLE_KLINE_ARCHIVE_DATETIME_TESTNET: kline_archive_datetime_testnet
      CLICKHOUSE_TABLE_ORDERBOOK_SNAPSHOTS_TESTNET: table_orderbook_snapshots_testnet
      CLICKHOUSE_TABLE_ORDERBOOK_ARCHIVE_FILENAME_TESTNET: orderbook_archive_filename_testnet
      CLICKHOUSE_TABLE_TRADE_RESULTS_TESTNET: orderbook_trade_testnet
      CLICKHOUSE_TABLE_POSITIONS_TESTNET: orderbook_positions_testnet

      # Backtesting files (–¥–ª—è Pydantic)
      BACKTESTING_DEFAULT_FILE_SETTINGS: default_strategy_settings.json
      BACKTESTING_BEST_FILE_SETTINGS: best_strategy_settings.json
      BACKTESTING_CUSTOM_FILE_SETTINGS: custom_strategy_settings.json
      BACKTESTING_CASH: 100000

      # Streaming settings (–¥–ª—è Pydantic)
      STREAM_SNAPSHOTS_COUNT: 20
      STREAM_SNAPSHOTS_ORDERBOOK_DEPTH: 200
      STREAM_SNAPSHOTS_INTERVAL_SEC: 1
      STREAM_TIMER: 310
      STREAM_DURATION: 310

      # General settings (–¥–ª—è Pydantic)
      SETTINGS_TESTNET: False
      SETTINGS_ARCHIVE_MODE: False
      SETTINGS_ARCHIVE_SOURCE: False
      SETTINGS_STREAM_SOURCE: False
      SETTINGS_STREAM_MODE: False
      SETTINGS_USE_WS: False
      SETTINGS_FOLDER_REPORT: reports
      SETTINGS_DATASETS_DIR: datasets
      SETTINGS_PAIR_TOKENS: ETHUSDT
      SETTINGS_START_TIME: 2025-06-20
      SETTINGS_END_TIME: 2025-06-21

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set up Python 3.11 # –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ 3.11 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install ClickHouse Client
      run: |
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg

        # –°–∫–∞—á–∏–≤–∞–µ–º GPG-–∫–ª—é—á ClickHouse –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª—é—á–µ–π
        sudo mkdir -p /usr/share/keyrings
        curl -fsSL 'https://packages.clickhouse.com/rpm/lts/repodata/repomd.xml.key' | sudo gpg --dearmor -o /usr/share/keyrings/clickhouse-keyring.gpg

        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã
        ARCH=$(dpkg --print-architecture)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ClickHouse –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ apt, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –∫–ª—é—á –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        echo "deb [signed-by=/usr/share/keyrings/clickhouse-keyring.gpg arch=${ARCH}] https://packages.clickhouse.com/deb stable main" | sudo tee /etc/apt/sources.list.d/clickhouse.list

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ apt
        sudo apt-get update

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º clickhouse-client
        sudo apt-get install -y clickhouse-client

    - name: Install lsof
      run: sudo apt-get update && sudo apt-get install -y lsof

    - name: Check if required ports are in use
      run: |
        for port in 8123 9000 18123 19000; do
          echo "Checking if port $port is in use:"
          if sudo lsof -i :$port; then
            echo "‚ùå Port $port is already in use!"
          else
            echo "‚úÖ Port $port is free"
          fi
          echo "------"
        done

        echo "üîç Full list of listening ports:"
        sudo lsof -i -P -n | grep LISTEN || echo "No listening ports found"

    - name: Check ClickHouse Listening Ports
      run: |
        echo "üîç Checking listening ports inside ClickHouse container"
        docker ps
        CONTAINER_ID=$(docker ps --filter "ancestor=clickhouse/clickhouse-server:latest" --format "{{.ID}}")
        echo "üì¶ Container ID: $CONTAINER_ID"

        echo "üõ† Installing net-tools (for netstat)"
        docker exec $CONTAINER_ID bash -c "apt-get update && apt-get install -y net-tools"

        echo "üì° Listening ports inside container:"
        docker exec $CONTAINER_ID bash -c "netstat -tuln | grep LISTEN || echo '‚ùå No ports found listening'"


    - name: Wait for ClickHouse to be ready
      run: |
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost –∏ –ø—Ä–æ–±—Ä–æ—à–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç 9000 –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        # –ü–∞—Ä–æ–ª—å –ø—É—Å—Ç–æ–π, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ .env
        for i in {1..30}; do
          echo "SELECT 1;" | clickhouse-client --host localhost --port 19000 --user default --password password && break
          echo "Waiting for ClickHouse..."
          sleep 5
        done

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install .[testing]
        pip install black mypy

    - name: Create py.typed file
      run: |
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª py.typed –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ src/,
        # —á—Ç–æ–±—ã mypy —Å—á–∏—Ç–∞–ª –µ–µ –ø–∞–∫–µ—Ç–æ–º —Å —Ç–∏–ø–∞–º–∏.
        touch src/py.typed

    # - name: Run black formatting check
    #   run: |
    #     black . # Removed --check to allow reformatting

    # - name: Run mypy type checks
    #   run: |
    #     # –¢–µ–ø–µ—Ä—å mypy –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–∏–ø—ã –≤ –≤–∞—à–∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö.
    #     # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –∏—Ö –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–æ–¥–µ.
    #     mypy src/

    - name: Run pytest and generate report
      run: |
        pytest --junitxml=pytest-report.xml

    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pytest-report
        path: pytest-report.xml
