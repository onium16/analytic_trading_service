name: CI Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      clickhouse:
        image: clickhouse/clickhouse-server:latest
        ports: # Проброс портов для локального тестирования с act
          - 18123:8123 # HTTP порт (хост:контейнер)
          - 9000:9000 # TCP порт (хост:контейнер) - мапим 9000 на стандартный 9000
        env:
          CLICKHOUSE_USER: default
          CLICKHOUSE_PASSWORD: "" # Пароль установлен на пустую строку, как в .env
          CLICKHOUSE_DB_NAME: oraculv2 # Имя базы данных
          CLICKHOUSE_PORT_HTTP: 8123 # HTTP порт ClickHouse
          CLICKHOUSE_PORT_TCP: 9000 # TCP порт ClickHouse (внутри контейнера)
          CLICKHOUSE_LOGIN: default # Логин для ClickHouse
        options: >-
          --health-cmd="clickhouse-client --query 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      # Bybit keys
      BYBIT_API_KEY: ""
      BYBIT_API_SECRET: ""
      BYBIT_BASE_URL: https://api.bybit.com
      BYBIT_KLINE_URL: https://api.bybit.com/v5/market/kline
      BYBIT_ORDERBOOK_URL: https://api.bybit.com/v5/market/orderbook
      BYBIT_WS_URL: wss://stream.bybit.com/v5/public/linear
      BYBIT_TEST_API_KEY: None
      BYBIT_TEST_API_SECRET: None
      BYBIT_TEST_BASE_URL: https://api-testnet.bybit.com
      BYBIT_TEST_ORDERBOOK_URL: https://api-testnet.bybit.com/v5/market/orderbook
      BYBIT_TEST_KLINE_URL: https://api-testnet.bybit.com/v5/market/kline
      BYBIT_TEST_WS_URL: wss://stream-testnet.bybit.com/v5/public/linear

      # Binance keys
      BINANCE_API_KEY: ""
      BINANCE_API_SECRET: ""
      BINANCE_BASE_URL: https://api.binance.com
      BINANCE_KLINE_URL: https://api.binance.com/api/v3/klines
      BINANCE_TEST_API_KEY: None
      BINANCE_TEST_API_SECRET: None
      BINANCE_TEST_BASE_URL: https://testnet.binance.vision
      BINANCE_TEST_KLINE_URL: https://testnet.binance.vision/api/v3/klines

      # ClickHouse connection (для clickhouse-client и Pydantic)
      CLICKHOUSE_HOST: localhost # Для доступа через проброшенные порты на хосте
      CLICKHOUSE_PORT: 9000 # Используем проброшенный TCP порт (хост-порт 9000)
      CLICKHOUSE_USER: default # Используется clickhouse-client
      CLICKHOUSE_LOGIN: default # Используется clickhouse-client
      CLICKHOUSE_PASSWORD: "" # Пароль установлен на пустую строку

      # ClickHouse DB settings (для Pydantic)
      CLICKHOUSE_DB_NAME: oraculv2

      # Tables names (для Pydantic)
      CLICKHOUSE_TABLE_KLINE_ARCHIVE: kline_archive
      CLICKHOUSE_TABLE_KLINE_ARCHIVE_DATETIME: kline_archive_datetime
      CLICKHOUSE_TABLE_ORDERBOOK_SNAPSHOTS: orderbook_archive_snapshots
      CLICKHOUSE_TABLE_ORDERBOOK_ARCHIVE_FILENAME: orderbook_archive_filename
      CLICKHOUSE_TABLE_TRADE_RESULTS: trade_results
      CLICKHOUSE_TABLE_TRADE_SIGNALS: trade_signals
      CLICKHOUSE_TABLE_POSITIONS: trade_positions

      # Tables names testnet (для Pydantic)
      CLICKHOUSE_TABLE_KLINE_ARCHIVE_TESTNET: kline_archive_testnet
      CLICKHOUSE_TABLE_KLINE_ARCHIVE_DATETIME_TESTNET: kline_archive_datetime_testnet
      CLICKHOUSE_TABLE_ORDERBOOK_SNAPSHOTS_TESTNET: table_orderbook_snapshots_testnet
      CLICKHOUSE_TABLE_ORDERBOOK_ARCHIVE_FILENAME_TESTNET: orderbook_archive_filename_testnet
      CLICKHOUSE_TABLE_TRADE_RESULTS_TESTNET: orderbook_trade_testnet
      CLICKHOUSE_TABLE_POSITIONS_TESTNET: orderbook_positions_testnet

      # Backtesting files (для Pydantic)
      BACKTESTING_DEFAULT_FILE_SETTINGS: default_strategy_settings.json
      BACKTESTING_BEST_FILE_SETTINGS: best_strategy_settings.json
      BACKTESTING_CUSTOM_FILE_SETTINGS: custom_strategy_settings.json
      BACKTESTING_CASH: 100000

      # Streaming settings (для Pydantic)
      STREAM_SNAPSHOTS_COUNT: 20
      STREAM_SNAPSHOTS_ORDERBOOK_DEPTH: 200
      STREAM_SNAPSHOTS_INTERVAL_SEC: 1
      STREAM_TIMER: 310
      STREAM_DURATION: 310

      # General settings (для Pydantic)
      SETTINGS_TESTNET: False
      SETTINGS_ARCHIVE_MODE: False
      SETTINGS_ARCHIVE_SOURCE: False
      SETTINGS_STREAM_SOURCE: False
      SETTINGS_STREAM_MODE: False
      SETTINGS_USE_WS: False
      SETTINGS_FOLDER_REPORT: reports
      SETTINGS_DATASETS_DIR: datasets
      SETTINGS_PAIR_TOKENS: ETHUSDT
      SETTINGS_START_TIME: 2025-06-20
      SETTINGS_END_TIME: 2025-06-21

      PYTHONPATH: . # Добавляем текущую директорию в PYTHONPATH

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set up Python 3.11 # Обновлено до 3.11 для совместимости с зависимостями
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install ClickHouse Client
      run: |
        # Устанавливаем необходимые пакеты
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg

        # Скачиваем GPG-ключ ClickHouse и сохраняем его в хранилище ключей
        sudo mkdir -p /usr/share/keyrings
        curl -fsSL 'https://packages.clickhouse.com/rpm/lts/repodata/repomd.xml.key' | sudo gpg --dearmor -o /usr/share/keyrings/clickhouse-keyring.gpg

        # Получаем архитектуру системы
        ARCH=$(dpkg --print-architecture)

        # Добавляем репозиторий ClickHouse в источники apt, используя подписанный ключ и архитектуру
        echo "deb [signed-by=/usr/share/keyrings/clickhouse-keyring.gpg arch=${ARCH}] https://packages.clickhouse.com/deb stable main" | sudo tee /etc/apt/sources.list.d/clickhouse.list

        # Обновляем списки пакетов apt
        sudo apt-get update

        # Устанавливаем clickhouse-client
        sudo apt-get install -y clickhouse-client

    - name: Wait for ClickHouse to be ready
      run: |
        # Используем localhost и проброшенный TCP порт 9000 для подключения
        # Пароль пустой, как указано в .env
        for i in {1..30}; do
          echo "SELECT 1;" | clickhouse-client --host localhost --port 9000 --user default --password "" && break
          echo "Waiting for ClickHouse..."
          sleep 2
        done

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install .[testing]
        pip install black mypy

    - name: Create py.typed file
      run: |
        # Создаем пустой файл py.typed в корневой директории src/,
        # чтобы mypy считал ее пакетом с типами.
        touch src/py.typed

    # - name: Run black formatting check
    #   run: |
    #     black . # Removed --check to allow reformatting

    # - name: Run mypy type checks
    #   run: |
    #     # Теперь mypy будет проверять типы в ваших собственных модулях.
    #     # Если есть ошибки, их нужно будет исправить в коде.
    #     mypy src/

    - name: Run pytest and generate report
      run: |
        pytest --junitxml=pytest-report.xml

    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pytest-report
        path: pytest-report.xml
